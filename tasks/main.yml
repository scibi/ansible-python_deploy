---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

- import_role:
    name: 'ansible_plugins'

- import_role:
    name: 'secret'

- name: test python_deploy__combined_apt_packages
  debug:
    msg: '{{ python_deploy__combined_apt_packages }}'

- name: test python_deploy__combined_apt_packages
  debug:
    msg: '{{ python_deploy__combined_apt_packages | parse_kv_items | map(attribute="name") | list }}'

- name: test python_deploy__combined_app_environment
  debug:
    msg: '{{ python_deploy__combined_app_environment }}'

- name: test python_deploy__combined_app_environment + parse_kv_items
  debug:
    msg: '{{ python_deploy__combined_app_environment | parse_kv_items }}'

- name: test python_deploy__dependent_services
  debug:
    msg: '{{ python_deploy__dependent_services }}'

- name: test python_deploy__combined_services
  debug:
    msg: '{{ python_deploy__combined_services }}'

- name: test python_deploy__combined_services + parse_kv_items
  debug:
    msg: '{{ python_deploy__combined_services | parse_kv_items }}'

#- fail:
#    msg: Debugowanie
# DebOps pre-hook [[[1
- name: Pre hooks
  include: '{{ lookup("task_src", "python_deploy/pre_main.yml") }}'


# tasks file for debops.python_deploy
- name: 'Check if python_deploy__type is set correctly'
  assert:
    that:
      - '{{ python_deploy__type in python_deploy__allowed_types }}'
      - '{{ python_deploy__name != False }}'
      - '{{ python_deploy__version != False }}'
    msg: 'python_deploy__type, python_deploy__name and python_deploy__version must be set correctly'

- name: Make sure home directory and its parents exists
  file:
    path: '{{ python_deploy__path_root }}'
    state: 'directory'
    recurse: 'yes'

- name: 'Create {{ python_deploy__group }} group'
  group:
    name: '{{ python_deploy__group }}'
    system: True
    state: 'present'

- name: 'Create {{ python_deploy__user }} user'
  user:
    name: '{{ python_deploy__user }}'
    group: '{{ python_deploy__group }}'
    home: '{{ python_deploy__path_root }}'
    comment: '{{ python_deploy__name }}'
    generate_ssh_key: True
    append: True
    system: True
    state: 'present'

- name: Set owner and permissions of home dir
  file:
    path: '{{ python_deploy__path_root }}'
    state: 'directory'
    owner: '{{ python_deploy__user }}'
    group: '{{ python_deploy__group }}'
    mode: '0755'

- name: 'Change shell to /bin/bash'
  user:
    name: '{{ python_deploy__user }}'
    shell: '/bin/bash'

- name: Create required directories
  file:
    path: '{{ item }}'
    state: 'directory'
    owner: '{{ python_deploy__user }}'
    group: '{{ python_deploy__group }}'
    mode: '0750'
  with_items:
    - '{{ python_deploy__path_root }}/bin'
    - '{{ python_deploy__path_root }}/env.d'

- import_tasks: git_checkout.yml
  when: python_deploy__type in ["git_without_setup", "git_with_setup", "git_with_poetry"]

- name: Install templates
  template:
    src: '{{ item.src }}'
    dest: '{{ python_deploy__path_root }}/{{ item.dest }}'
    owner: '{{ python_deploy__user }}'
    group: '{{ python_deploy__group }}'
    mode: '{{ item.mode|d("0640") }}'
  with_items: '{{ python_deploy__combined_templates }}'
  notify: '{{ python_deploy__combined_notify if python_deploy__combined_notify|d() else omit }}'

- name: Install required APT packages
  apt:
    name: '{{ python_deploy__combined_apt_packages | parse_kv_items | map(attribute="name") | list }}'
    state: 'present'
    install_recommends: False

- name: Upgrade pip if needed
  pip:
    name: 'pip'
    state: '{% if python_deploy__upgrade_pip %}latest{% else %}present{% endif %}'
    virtualenv: '{{ python_deploy__path_venv }}'
    virtualenv_python: '{{ python_deploy__python }}'
  become: yes
  become_user: '{{ python_deploy__user }}'

- name: Install Poetry with pipx
  become: yes
  become_user: '{{ python_deploy__user }}'
  when: python_deploy__type == 'git_with_poetry'
  shell: >
    pipx install poetry
    {%- if python_deploy__poetry_version != "latest" -%}
      =={{ python_deploy__poetry_version }}
    {%- endif -%}
  register: python_deploy__register_pipx
  failed_when: >
    (python_deploy__register_pipx.rc > 0) and
    ("Not installing to existing directory" not in python_deploy__register_pipx.stderr)
  changed_when: '"Not installing to existing directory" in python_deploy__register_pipx.stdout'

- name: 'Install Python package ({{ python_deploy__pypi_package_name }})'
  pip:
    name: '{{ python_deploy__pypi_package_name }}'
    version: '{{ python_deploy__version }}'
    virtualenv: '{{ python_deploy__path_venv }}'
    virtualenv_python: '{{ python_deploy__python }}'
  become: yes
  become_user: '{{ python_deploy__user }}'
  when: python_deploy__type == "pypi"
  notify: '{{ python_deploy__combined_notify if python_deploy__combined_notify|d() else omit }}'

- name: Install requirements with pip
  pip:
    requirements: '{{ python_deploy__path_app }}/{{ item }}'
    virtualenv: '{{ python_deploy__path_venv }}'
    virtualenv_python: '{{ python_deploy__python }}'
  become: yes
  become_user: '{{ python_deploy__user }}'
  with_items: '{{ python_deploy__requirements_files }}'
  when: python_deploy__type == "git_without_setup"
  notify: '{{ python_deploy__combined_notify if python_deploy__combined_notify|d() else omit }}'

- name: Install requirements with Poetry
  become: yes
  become_user: '{{ python_deploy__user }}'
  when: python_deploy__type == "git_with_poetry"
  block:
  - name: Check if Poetry is configured to use existing env
    shell: '{{python_deploy__poetry_install_path}}/bin/poetry config virtualenvs.create'
    register: poetry_virtualenvs_create
    changed_when: False

  - name: 'Configure Poetry to use existing python env'
    shell: '{{python_deploy__poetry_install_path}}/bin/poetry config virtualenvs.create false'
    when: poetry_virtualenvs_create.stdout == 'true'

  - name: Install requirements with Poetry
    shell: '{{python_deploy__poetry_install_path}}/bin/poetry install --no-root --no-dev'
    args:
      chdir: '{{ python_deploy__path_app }}'
    register: poetry_install
    environment:
      VIRTUAL_ENV: '{{ python_deploy__path_venv }}'
    changed_when: '"No dependencies to install or update" not in poetry_install.stdout'
    notify: '{{ python_deploy__combined_notify if python_deploy__combined_notify|d() else omit }}'


#- name: Install Python packages
#  pip:
#    requirements: '{{ django_app__app_path }}/{{ item }}'
#    virtualenv: '{{ django_app__venv_path }}'
#    virtualenv_python: '{{ django_app__python }}'
#  become_user: '{{ django_app__user }}'
#  with_items: '{{ django_app__requirements_files }}'
#  when: '{{ django_app__requirements_type == "requirements.txt" }}'

- include: services.yml

# DebOps post-hook [[[1
- name: Post hooks
  include: '{{ lookup("task_src", "python_deploy/post_main.yml") }}'

